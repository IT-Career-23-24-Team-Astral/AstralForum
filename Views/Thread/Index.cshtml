@using AstralForum.Data.Entities
@using Microsoft.AspNetCore.Identity
@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@model AstralForum.Models.ThreadViewModel

@{
	ViewData["Title"] = "Thread " + Model.ThreadDto.Title;
	Layout = "../Shared/_Layout.cshtml";
}

<h5>
	Thread in category <a asp-controller="Category" asp-action="Specify" asp-route-id="@Model.ThreadDto.ThreadCategoryId">@Model.ThreadDto.ThreadCategoryName</a>
</h5>
<div class="col-auto">
	<form id="searchForm" class="form-inline" asp-controller="Thread" asp-action="SearchPostsByText" method="get">

		<input type="hidden" name="id" value="@Model.ThreadDto.Id" />
		<input class="form-control form-control-sm mr-2" type="text" placeholder="Search" aria-label="Search" name="searchQuery">
		<button type="submit" class="btn btn-primary btn-sm">Search</button>
	</form>
</div>
<form class="filter-box">
	<div class="form-check form-check-inline">
		<input class="form-check-input" type="checkbox" id="filterComment" name="filterComment">
		<label class="form-check-label" for="filterComment">Filter by Comment</label>
	</div>
	<div class="form-check form-check-inline">
		<input class="form-check-input" type="checkbox" id="filterCreatedBy" name="filterCreatedBy">
		<label class="form-check-label" for="filterCreatedBy">Filter by Author</label>
	</div>
</form>

<div class="container">
	<div class="row">
		<div class="col">
			<h2 id="threadTitle">@Model.ThreadDto.Title</h2>
			<p id="threadText">@Model.ThreadDto.Text</p>
			<div>
				<form id="threadEditForm" class="d-none" method="post">
					<input type="hidden" name="threadDtoId" value="@Model.ThreadDto.Id" />
					<div class="mb-3">
						<input name="updatedTitle" class="form-control form-control-lg" id="editThreadTitleInput" />
					</div>
					<div class="mb-3">
						<textarea name="updatedText" class="form-control" id="editThreadTextInput" rows="5"></textarea>
					</div>
					<div class="d-flex flex-wrap">
						<button type="submit" class="btn btn-primary me-3" asp-controller="Thread" asp-action="Edit">
							Save changes
						</button>
						<button class="btn btn-danger" onclick="btnCancelThreadEdit()">
							Cancel
						</button>
					</div>
				</form>
			</div>

			@if (Model.ThreadDto.Attachments.Count > 0)
			{
				<hr />
				<h6 class="fst-italic fw-lighter">Attachments: </h6>
			}

			@foreach (var attachment in Model.ThreadDto.Attachments)
			{
				<a href="@attachment.AttachmentUrl" target="_blank">@attachment.FileName</a>
				<br />
			}
		</div>
		<div class="col col-3">
			<div class="d-flex justify-content-end">
				<span class="fw-light">
					Posted at @Model.ThreadDto.CreatedOn.ToString("g")
				</span>
			</div>
			@if(SignInManager.IsSignedIn(User) && (await UserManager.GetUserAsync(User)).Id == Model.ThreadDto.CreatedById)
			{
				<button class="btn btn-secondary" onclick="btnThreadEdit()">
					Edit
				</button>
			}
		</div>
	</div>

	<div class="row">
		<div class="col d-flex flex-wrap">
			@foreach (var reactionType in Model.ReactionTypeDtos)
			{
				bool buttonDisabled = false;
				int loggedInUserId = 0;

				if (SignInManager.IsSignedIn(User))
				{
					loggedInUserId = (await UserManager.GetUserAsync(User)).Id;
				}
				else
				{
					buttonDisabled = false;
				}

				if (@Model.ThreadDto.Reactions.Where(r => r.CreatedById == loggedInUserId && r.ReactionTypeId == reactionType.Id).Any())
				{
					buttonDisabled = true;
				}

				if (buttonDisabled)
				{
					<form asp-controller="Thread" asp-action="RemoveThreadReaction" onsubmit="formRemoveReaction()" method="post">
						@Html.AntiForgeryToken()
						<input type="hidden" name="reactionThreadId" value="@Model.ThreadDto.Reactions.Single(r => r.CreatedById == loggedInUserId && r.ReactionTypeId == reactionType.Id).Id" />
						<input type="hidden" name="threadId" value="@Model.ThreadDto.Id" />
						<input type="hidden" name="reactionTypeId" value="@reactionType.Id" />
						@if (SignInManager.IsSignedIn(User))
						{
							<button type="submit" class="btn btn-outline-secondary opacity-50 m-1 px-1 border border-1 border-secondary rounded d-flex align-items-center" title="Remove comment reaction">
								<img class="me-1" src="@reactionType.ImageUrl" width="20" height="20" />
								<span class="fw-light">@Model.ThreadDto.Reactions.Count(r => r.ReactionTypeId == reactionType.Id)</span>
							</button>
						}
						else
						{
							<button type="submit" class="btn btn-outline-secondary opacity-50 m-1 px-1 border border-1 border-secondary rounded d-flex align-items-center">
								<img class="me-1" src="@reactionType.ImageUrl" width="20" height="20" />
								<span class="fw-light">@Model.ThreadDto.Reactions.Count(r => r.ReactionTypeId == reactionType.Id)</span>
							</button>
						}
					</form>
				}
				else
				{
					<form asp-controller="Thread" asp-action="AddThreadReaction" onsubmit="formAddReaction()" method="post">
						@Html.AntiForgeryToken()
						<input type="hidden" name="threadId" value="@Model.ThreadDto.Id" />
						<input type="hidden" name="reactionTypeId" value="@reactionType.Id" />
						@if (SignInManager.IsSignedIn(User))
						{
							<button type="submit" class="btn btn-outline-secondary m-1 px-1 border border-1 border-secondary rounded d-flex align-items-center" title="Add comment reaction">
								<img class="me-1" src="@reactionType.ImageUrl" width="20" height="20" />
								<span class="fw-light">@Model.ThreadDto.Reactions.Count(r => r.ReactionTypeId == reactionType.Id)</span>
							</button>
						}
						else
						{
							<button type="submit" class="btn btn-outline-secondary m-1 px-1 border border-1 border-secondary rounded d-flex align-items-center">
								<img class="me-1" src="@reactionType.ImageUrl" width="20" height="20" />
								<span class="fw-light">@Model.ThreadDto.Reactions.Count(r => r.ReactionTypeId == reactionType.Id)</span>
							</button>
						}
					</form>
				}
			}
		</div>
		<div class="col-2">
			<span class="font-monospace">
				by @Model.ThreadDto.CreatedBy.UserName
			</span>
			<br>
			<span class="fw-light">
				Member since: @Model.ThreadDto.CreatedBy.DateOfCreation.ToString("g")
			</span>
		</div>
		<div class="col col-1 d-flex justify-content-end align-items-end">
			<img src="@Model.ThreadDto.CreatedBy.ProfilePictureUrl" class="rounded-3 comment-profile-picture" width="45" height="45">
		</div>
	</div>

	<div class="row mt-1">
		<div class="col-auto ml-auto">
			<form id="searchForm" class="form-inline" asp-controller="Thread" asp-action="SearchPostsByText" method="get">
				<input type="hidden" name="id" value="@Model.ThreadDto.Id" />
				<div class="input-group mb-2">
					<input class="form-control form-control-sm" type="text" placeholder="Search" aria-label="Search" name="searchQuery">
					<div class="input-group-append">
						<button type="submit" class="btn btn-primary btn-sm">Search</button>
					</div>
				</div>
				<div class="form-check form-check-inline ml-2">
					<input class="form-check-input" type="checkbox" id="filterComment" name="filterComment">
					<label class="form-check-label" for="filterComment">Search by Title</label>
				</div>
				<div class="form-check form-check-inline">
					<input class="form-check-input" type="checkbox" id="filterCreatedBy" name="filterCreatedBy">
					<label class="form-check-label" for="filterCreatedBy">Search by Author</label>
				</div>
			</form>
		</div>
	</div>

	<div class="row">
		<div class="col">
			@if (Model.ThreadDto.Comments.Count == 0 || Model.ThreadDto.Comments.All(item => item.IsHidden == true))
			{
				<h3 class="fst-italic fw-semibold">No comments have been made on this thread yet</h3>
				<p>Be the first one to comment on this thread!</p>
			}
			else
			{
				<h2>Comments</h2>
			}
		</div>
		<div class="col d-flex justify-content-end">
			@if (SignInManager.IsSignedIn(User))
			{
				<btn class="btn btn-primary btn-comment align-self-center">Add a comment</btn>
			}
			else
			{
				<p class="text-danger">To post a comment, please log in</p>
			}
		</div>
	</div>

	@foreach (var item in Model.ThreadDto.Comments.Where(t => t.IsHidden == false && t.IsDeleted == false))
	{
		<div class="border border-secondary bg-secondary bg-opacity-10 rounded px-2 py-2 mb-3">
			<div class="row">
				<div class="col">
					<span class="fw-light">
						Posted at @item.CreatedOn.ToString("g")
					</span>
				</div>
				<div class="col-2 d-flex justify-content-end">
					<btn class="btn btn-primary btn-reply" onclick="btnAddReply(@item.Id)">Reply to this comment</btn>
				</div>
			</div>

			<p>
				@item.Text

				@if (item.Attachments.Count > 0)
				{
					<hr />
					<h6 class="fst-italic fw-lighter">Attachments: </h6>
				}

				@foreach (var attachment in item.Attachments)
				{
					<a href="@attachment.AttachmentUrl" target="_blank">@attachment.FileName</a>
					<br />
				}
			</p>

			<div class="row">
				<div class="col col-2">
					<div class="row">
						<div class="col-8">
							<span class="font-monospace">
								by @item.CreatedBy.UserName
							</span>
							<br>
							<span class="fw-light">
								Member since: @item.CreatedBy.DateOfCreation.ToString("g")
							</span>
						</div>
						<div class="col d-flex justify-content-end align-items-end">
							<img src="@item.CreatedBy.ProfilePictureUrl" class="rounded-3 comment-profile-picture" width="40" height="40">
						</div>
					</div>
				</div>
				<div class="col d-flex flex-wrap">
					@foreach (var reactionType in Model.ReactionTypeDtos)
					{
						bool buttonDisabled = false;
						int loggedInUserId = 0;

						if (SignInManager.IsSignedIn(User))
						{
							loggedInUserId = (await UserManager.GetUserAsync(User)).Id;
						}
						else
						{
							buttonDisabled = false;
						}

						if (item.Reactions.Where(r => r.CreatedById == loggedInUserId && r.ReactionTypeId == reactionType.Id).Any())
						{
							buttonDisabled = true;
						}

						if (buttonDisabled)
						{
							<form asp-controller="Comment" asp-action="RemoveCommentReaction" onsubmit="formRemoveReaction()" method="post">
								@Html.AntiForgeryToken()
								<input type="hidden" name="reactionCommentId" value="@item.Reactions.Single(r => r.CreatedById == loggedInUserId && r.ReactionTypeId == reactionType.Id).Id" />
								<input type="hidden" name="commentId" value="@item.Id" />
								<input type="hidden" name="reactionTypeId" value="@reactionType.Id" />
								<button type="submit" class="btn btn-outline-secondary opacity-50 m-1 px-1 border border-1 border-secondary rounded d-flex align-items-center" title="@reactionType.Name">
									<img class="me-1" src="@reactionType.ImageUrl" width="20" height="20" />
									<span class="fw-light">@item.Reactions.Count(r => r.ReactionTypeId == reactionType.Id)</span>
								</button>
							</form>
						}
						else
						{
							<form asp-controller="Comment" asp-action="AddCommentReaction" onsubmit="formAddReaction()" method="post">
								@Html.AntiForgeryToken()
								<input type="hidden" name="commentId" value="@item.Id" />
								<input type="hidden" name="reactionTypeId" value="@reactionType.Id" />
								<button type="submit" class="btn btn-outline-secondary m-1 px-1 border border-1 border-secondary rounded d-flex align-items-center" title="@reactionType.Name">
									<img class="me-1" src="@reactionType.ImageUrl" width="20" height="20" />
									<span class="fw-light">@item.Reactions.Count(r => r.ReactionTypeId == reactionType.Id)</span>
								</button>
							</form>
						}
					}
				</div>
				<div class="col col-2 d-flex flex-column justify-content-center align-items-end">
					<div class="col d-flex justify-content-end">
						@if (User.IsInRole("Admin") || User.IsInRole("Moderator"))
						{
							<button class="toggleAdminPanel btn btn-primary">Moderator Panel</button>
						}
						<div class="adminPanel" style="display: none;">
							@if (User.IsInRole("Admin") || User.IsInRole("Moderator"))
							{
								<div class="adminPanel">
									<form asp-controller="Admin" asp-action="Timeout" method="get">
										<button type="submit" class="btn btn-warning">Timeout</button>
										<input type="hidden" name="id" value="@Model.ThreadDto.CreatedById">
										<input type="datetime-local" id="time" name="time" value="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" required>
									</form>
									<form asp-controller="Comment" asp-action="HideComment" asp-route-id="@item.Id" method="get">
										<button type="submit" class="btn btn-danger adminButton" style="margin: 0px 28px 5px 0px">Hide</button>
									</form>
								</div>
							}
						</div>
					</div>
        </div>
				<div class="col col-2 d-flex justify-content-end align-self-center">
					<btn id="btnShowRepliesCommentId-@item.Id" class="btn btn-light btn-show-replies" onclick="btnShowReplies(@item.Id)">Show replies</btn>
					<btn id="btnHideRepliesCommentId-@item.Id" class="btn btn-light btn-hide-replies d-none" onclick="btnHideReplies(@item.Id)">Hide replies</btn>
				</div>
			</div>

			<div id="replyWritingForm-@item.Id">
			</div>

			<div id="repliesToCommentId-@item.Id" class="d-none mt-3">
			</div>
		</div>
	}

	<form id="replyWritingForm" class="d-none" method="post" enctype="multipart/form-data">
		<input type="hidden" asp-for="CommentForm.CommentId" id="commentIdFormInput" />
		<div class="mb-3">
			<label asp-for="CommentForm.Text" class="form-label">Reply text</label>
			<textarea asp-for="CommentForm.Text" class="form-control" rows="2"></textarea>
			<div class="form-text">This comment will be posted publicly. Make sure it follows our code of conduct.</div>
		</div>
		<div class="mb-3">
			<label asp-for="CommentForm.Attachments" class="form-label">Attachments</label>
			<input asp-for="CommentForm.Attachments" class="form-control" type="file" multiple>
		</div>
		<button type="submit" class="btn btn-primary" asp-controller="Comment" asp-action="AddCommentReply" asp-route-threadId="@Model.ThreadDto.Id">
			Post your reply
		</button>
	</form>

	<form id="commentWritingForm" class="d-none" method="post" enctype="multipart/form-data">
		<div class="mb-3">
			<label asp-for="CommentForm.Text" class="form-label">Comment text</label>
			<textarea asp-for="CommentForm.Text" class="form-control" rows="4"></textarea>
			<span asp-validation-for="CommentForm.Text" class="text-danger"></span>
		</div>
		<div class="mb-3">
			<label asp-for="CommentForm.Attachments" class="form-label">Attachments</label>
			<input asp-for="CommentForm.Attachments" class="form-control" type="file" multiple>
		</div>
		<button type="submit" class="btn btn-primary" asp-controller="Comment" asp-action="AddThreadComment" asp-route-threadId="@Model.ThreadDto.Id">Post your comment</button>
	</form>
</div>

<script>
	const replyTemplate = `
		<div class="border border-secondary bg-secondary bg-opacity-10 rounded px-2 py-2 mb-3">
			<div class="row">
				<div class="col">
					<span class="fw-light">
						Posted at {commentCreatedOn}
					</span>
				</div>
				<div class="col-2 d-flex justify-content-end">
						<btn class="btn btn-primary btn-reply" onclick="btnAddReply({commentId})">Reply to this comment</btn>
				</div>
			</div>

			<p>
				{commentText}
				{commentAttachments}
			</p>

			<div class="row">
				<div class="col col-2">
					<div class="row">
						<div class="col-8">
							<span class="font-monospace">
								by {commentCreatedBy}
							</span>
							<br>
							<span class="fw-light">
								Member since: {commentCreatedByDateOfCreation}
							</span>
						</div>
						<div class="col d-flex justify-content-end align-items-end">
							<img src="{commentCreatedByProfilePicture}" class="rounded-3 comment-profile-picture" width="40" height="40">
						</div>
					</div>
				</div>
				<div class="col d-flex flex-wrap">
					{reactionSection}
				</div>
				<div class="col col-2 d-flex justify-content-end align-self-center">
					<btn id="btnShowRepliesCommentId-{commentId}" class="btn btn-light btn-show-replies" onclick="btnShowReplies({commentId})">Show replies</btn>
					<btn id="btnHideRepliesCommentId-{commentId}" class="btn btn-light btn-hide-replies d-none" onclick="btnHideReplies({commentId})">Hide replies</btn>
				</div>
			</div>

			<div id="replyWritingForm-{commentId}">

			</div>

			<div id="repliesToCommentId-{commentId}" class="mt-3 d-none">

			</div>
		</div>
		`;

	function btnAddReply(replyToCommentId) {
		document.getElementById(`replyWritingForm-${replyToCommentId}`).append(document.getElementById("replyWritingForm"));
		document.getElementById("replyWritingForm").classList.remove("d-none");
		document.getElementById("commentIdFormInput").value = replyToCommentId;
	}

	function btnShowReplies(commentId) {
		document.getElementById(`repliesToCommentId-${commentId}`).classList.remove("d-none");

		if (document.getElementById(`repliesToCommentId-${commentId}`).textContent.trim() == "")
		{
			fillReplies(commentId);
		}
		
		document.getElementById(`btnShowRepliesCommentId-${commentId}`).classList.add("d-none");
		document.getElementById(`btnHideRepliesCommentId-${commentId}`).classList.remove("d-none");
	}

	function btnHideReplies(commentId) {
		document.getElementById(`repliesToCommentId-${commentId}`).classList.add("d-none");

		document.getElementById(`btnShowRepliesCommentId-${commentId}`).classList.remove("d-none");
		document.getElementById(`btnHideRepliesCommentId-${commentId}`).classList.add("d-none");
	}

	function fillReplies(commentId) {
		fetch(`/Comment/CommentReplies?commentId=${commentId}`)
			.then(response => response.json())
			.then(comments =>
				comments.forEach(function (comment) {
					var commentAttachments = "";

					if (Object.keys(comment.attachments).length) {
						commentAttachments += `<hr /> <h6 class="fst-italic fw-lighter">Attachments: </h6>`;
					}

					comment.attachments.forEach(function (attachment) {
						commentAttachments += `<a href="${attachment.attachmentUrl}" target="_blank">${attachment.fileName}</a> <br />`;
					});

					let reactionSection = "";

					let loggedInUserId = 0;
					let buttonDisabled = false;
					let matchingReactionId = 0;
					let reactionsCount = 0;

					@if (SignInManager.IsSignedIn(User))
					{
						int loggedInUserId = (await UserManager.GetUserAsync(User)).Id;
						<text>
							loggedInUserId = @loggedInUserId;
						</text>
					}

					@foreach (var reactionType in Model.ReactionTypeDtos)
					{
						<text>
							matchingReactionId = 0;
								reactionsCount = 0;
								buttonDisabled = false;

								comment.reactions.forEach(function (reaction) {
									if (reaction.createdById == loggedInUserId && reaction.reactionTypeId == @reactionType.Id) {
										buttonDisabled = true;
										matchingReactionId = reaction.id;
									}
									if (reaction.reactionTypeId == @reactionType.Id) {
										reactionsCount++;
									}
								})

								if (buttonDisabled) {
									reactionSection += `
										<form asp-controller="Comment" asp-action="RemoveCommentReaction" onsubmit="formRemoveReaction()" method="post">
											@Html.AntiForgeryToken()
											<input type="hidden" name="reactionCommentId" value="${matchingReactionId}" />
											<input type="hidden" name="commentId" value="{commentId}" />
											<input type="hidden" name="reactionTypeId" value="@reactionType.Id" />
											<button type="submit" class="btn btn-outline-secondary opacity-50 m-1 px-1 border border-1 border-secondary rounded d-flex align-items-center" title="@reactionType.Name">
												<img class="me-1" src="@reactionType.ImageUrl" width="20" height="20" />
												<span class="fw-light">${reactionsCount}</span>
											</button>
										</form>`;
								}
								else {
									reactionSection += `
										<form asp-controller="Comment" asp-action="AddCommentReaction" onsubmit="formAddReaction()" method="post">
											@Html.AntiForgeryToken()
											<input type="hidden" name="commentId" value="{commentId}" />
											<input type="hidden" name="reactionTypeId" value="@reactionType.Id" />
											<button type="submit" class="btn btn-outline-secondary m-1 px-1 border border-1 border-secondary rounded d-flex align-items-center" title="@reactionType.Name">
												<img class="me-1" src="@reactionType.ImageUrl" width="20" height="20" />
												<span class="fw-light">${reactionsCount}</span>
											</button>
										</form>`;
								}
							</text>
						}

						var commentDiv = replyTemplate
						.replaceAll('{reactionSection}', reactionSection)
						.replaceAll('{commentAttachments}', commentAttachments)
						.replaceAll('{commentId}', comment.id)
						.replaceAll('{commentCreatedBy}', comment.createdBy.userName)
						.replaceAll('{commentCreatedByDateOfCreation}', comment.createdBy.dateOfCreation)
						.replaceAll('{commentCreatedByProfilePicture}', comment.createdBy.profilePictureUrl)
						.replaceAll('{commentText}', comment.text)
						.replaceAll('{commentCreatedOn}', comment.createdOn);

					$(`#repliesToCommentId-${commentId}`).append(commentDiv);
				})
			);
	}

	function btnThreadEdit() {
		document.getElementById("threadEditForm").classList.remove("d-none");

		let threadTextElement = document.getElementById("threadText");
		threadTextElement.classList.add("d-none");

		let threadTitleElement = document.getElementById("threadTitle");
		threadTitleElement.classList.add("d-none");

		document.getElementById("editThreadTextInput").value = threadTextElement.textContent;
		document.getElementById("editThreadTextInput").focus();

		document.getElementById("editThreadTitleInput").setAttribute("value", threadTitleElement.textContent);
	}

	function btnCancelThreadEdit() {
		event.preventDefault();
		window.location.reload();
	}

	function formAddReaction() {
		event.preventDefault();
		let form = event.target;
		let reactionCounter = event.target.children[2].children[1];
		let buttonElement = event.target.children[2];
		var formData = new FormData(event.target);
		fetch(event.target.action, {
			method: 'POST',
			body: formData
		})
			.then(data => {
				// if the response url contains the current url,
				// then &autheticate=true was added and it needs to be refreshed
				// to show the login modal
				if (data.url.includes(window.location.href)) {
					window.location.href = data.url;
				} 
				else
				{
					location.reload();
				}
			});
	}

	function formRemoveReaction() {
		event.preventDefault();
		let reactionCounter = event.target.children[3].children[1];
		let buttonElement = event.target.children[3];
		var formData = new FormData(event.target);
		fetch(event.target.action, {
			method: 'POST',
			body: formData
		})
			.then(data => {
				if (data.url.includes(window.location.href)) {
					window.location.href = data.url;
				}
				else {
					location.reload();
				}
			});
	}

	$(document).ready(function () {
		$(".btn-comment").click(function () {
			$("#commentWritingForm").removeClass("d-none");
			$(window).scrollTop($("#commentWritingForm").position().top);
		});
	});
	$(document).ready(function () {
		$(".btn-comment").click(function () {
			$("#commentWritingForm").removeClass("d-none");
			$(window).scrollTop($("#commentWritingForm").position().top);
		});

		$(".filter-box input[type='checkbox']").change(function () {
			var commentChecked = $("#filterComment").is(":checked");
			var createdByChecked = $("#filterCreatedBy").is(":checked");

			if (commentChecked && createdByChecked) {
				alert("Only one filter can be applied.");
				$("#filterComment").prop("checked", false);
				$("#filterCreatedBy").prop("checked", false);
			} else {
				var action = "/Thread/SearchPostsByBoth";
				if (commentChecked) {
					action = "/Thread/SearchPostsByText";
				} else if (createdByChecked) {
					action = "/Thread/SearchPostsByCreatedBy";
				}
				$("#searchForm").attr("action", action);
			}
		});
	});
</script>



<script>
	$(document).ready(function () {
		$(".toggleAdminPanel").click(function () {
			event.stopPropagation();
			$(this).siblings(".adminPanel").toggle();
		});
	});
</script>
					